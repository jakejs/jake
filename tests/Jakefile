var exec = require('child_process').exec
  , fs = require('fs');

desc('The default task.');
task('default', function () {
  console.log('default task');
});

desc('No action.');
task({'noAction': ['default']});

desc('No action, no prereqs.');
task('noActionNoPrereqs');

desc('Accepts args and env vars.');
task('argsEnvVars', function () {
  var res = {
    args: arguments
  , env: {
      foo: process.env.foo
    , baz: process.env.baz
    }
  };
  console.log(JSON.stringify(res));
});

namespace('foo', function () {
  desc('The foo:bar task.');
  task('bar', function () {
    if (arguments.length) {
      console.log('foo:bar[' +
          Array.prototype.join.call(arguments, ',') +
          '] task');
    }
    else {
      console.log('foo:bar task');
    }
  });

  desc('The foo:baz task, calls foo:bar as a prerequisite.');
  task('baz', ['foo:bar'], function () {
    console.log('foo:baz task');
  });

  desc('The foo:qux task, calls foo:bar with cmdline args as a prerequisite.');
  task('qux', ['foo:bar[asdf,qwer]'], function () {
    console.log('foo:qux task');
  });

  desc('The foo:frang task, calls foo:bar with passed args as a prerequisite.');
  task('frang', function () {
    var task = jake.Task['foo:bar'];
    // Do args pass-through
    task.invoke.apply(task, arguments);
    console.log('foo:frang task');
  });

  desc('The foo:zoobie task, has no prerequisites.');
  task('zoobie', function () {
    console.log('foo:zoobie task');
  });

  desc('The foo:voom task, has no prerequisites.');
  task('voom', function () {
    console.log('foo:voom task');
  });

});

namespace('bar', function () {
  desc('The bar:foo task, has no prerequisites, is async.');
  task('foo', function () {
    console.log('bar:foo task');
    complete();
  }, {async: true});

  desc('The bar:bar task, has the async bar:foo task as a prerequisite.');
  task('bar', ['bar:foo'], function () {
    console.log('bar:bar task');
  });

});

namespace('hoge', function () {
  desc('The hoge:hoge task, has no prerequisites.');
  task('hoge', function () {
    console.log('hoge:hoge task');
  });

  desc('The hoge:piyo task, has no prerequisites.');
  task('piyo', function () {
    console.log('hoge:piyo task');
  });

  desc('The hoge:fuga task, has hoge:hoge and hoge:piyo as prerequisites.');
  task('fuga', ['hoge:hoge', 'hoge:piyo'], function () {
    console.log('hoge:fuga task');
  });

});

namespace('fileTest', function () {
  directory('foo');

  desc('File task, concatenating two files together');
  file({'foo/concat.txt': ['fileTest:foo', 'fileTest:foo/src1.txt', 'fileTest:foo/src2.txt']}, function () {
    console.log('fileTest:foo/concat.txt task');
    var data1 = fs.readFileSync('foo/src1.txt');
    var data2 = fs.readFileSync('foo/src2.txt');
    fs.writeFileSync('foo/concat.txt', data1 + data2);
  });

  desc('File task, async creation with child_process.exec');
  file('foo/src1.txt', function () {
    fs.writeFile('foo/src1.txt', 'src1', function (err) {
      if (err) {
        throw err;
      }
      console.log('fileTest:foo/src1.txt task');
      complete();
    });
  }, {async: true});

  desc('File task, sync creation with writeFileSync');
  file('foo/src2.txt', ['default'], function () {
    fs.writeFileSync('foo/src2.txt', 'src2');
    console.log('fileTest:foo/src2.txt task');
  });

  desc('File task, do not run unless the prereq file changes');
  file('foo/from-src1.txt', ['fileTest:foo', 'fileTest:foo/src1.txt'], function () {
    var data = fs.readFileSync('foo/src1.txt');
    fs.writeFileSync('foo/from-src1.txt', data);
    console.log('fileTest:foo/from-src1.txt task');
  }, {async: true});

  desc('File task, run if the prereq file changes');
	task('touch-prereq', function() {
    fs.writeFileSync('foo/prereq.txt', 'UPDATED');
	})

  desc('File task, has a preexisting file (with no associated task) as a prereq');
  file('foo/from-prereq.txt', ['fileTest:foo', 'foo/prereq.txt'], function () {
    var data = fs.readFileSync('foo/prereq.txt');
    fs.writeFileSync('foo/from-prereq.txt', data);
    console.log('fileTest:foo/from-prereq.txt task');
  });

});

/*
var sys = require('sys'),
    fs  = require('fs')
    proc = require('child_process');

desc('This is the default task.');
task('default', function () {
  console.log('doing default task.');
  console.log(sys.inspect(arguments));
  console.log(process.env.foo);
});

desc('This is the asdf task. It depends on both qwer and the default');
task({'asdf': ['qwer', 'default']}, function (a, b, c) {
  console.log('doing asdf task.');
  console.log(a, b, c);
});

desc('This is the qwer task. It depends on zxcv, uiop, and the default');
task({'qwer': ['zxcv', 'uiop', 'default']}, function () {
  console.log('doing qwer task.');
  console.log(sys.inspect(arguments));
});

desc('This is the zxcv task. It depends on the default');
task({'zxcv': ['default', 'uiop']}, function () {
  console.log('doing zxcv task.');
  console.log(sys.inspect(arguments));
});

desc('This is the uiop task. It has no action.');
task({'uiop': ['default']});

desc('This is the frang task. It has no action, no prereqs.');
task('frang');

desc('This is the fonebone task.');
task('fonebone', function () {
  console.log('doing fonebone task.');
});

directory('foo');

desc('File task, concatenating two files together');
file({'foo/concat.txt': ['foo', 'foo/src1.txt', 'foo/src2.txt']}, function () {
  console.log('doing concat.txt file-task');
  var data1 = fs.readFileSync('foo/src1.txt');
  var data2 = fs.readFileSync('foo/src2.txt');
  fs.writeFileSync('foo/concat.txt', data1 + data2);
});

desc('File task, don\'t run unless the prereq file changes');
file({'foo/src2-foo.txt': ['foo', 'foo/src2.txt']}, function () {
  console.log('doing src2-foo.txt file-task');
  var data2 = fs.readFileSync('foo/src2.txt');
  fs.writeFileSync('foo/src2-foo.txt', data2);
});


desc('File task, async creation with child_process.exec');
file('foo/src1.txt', function () {
  console.log('running src1.txt file-task');
  proc.exec('touch foo/src1.txt', function (err, stdout, stderr) {
    console.log('src1.txt complete');
    complete();
  });
}, true);

desc('File task, sync creation with writeFileSync');
file({'foo/src2.txt': 'fonebone'}, function () {
  console.log('doing src2.txt file-task');
  fs.writeFileSync('foo/src2.txt', '');
});

desc('Failing task.');
task('failure', function () {
  fail('Holy shit.', 42);
});

desc('Jake task lookup by name.');
task('lookup', function () {
  console.dir(jake.Task['foo:bar']);
});

namespace('foo', function () {
  desc('This the foo:bar task');
  task({'bar': ['default', 'foo:qux', 'foo:baz']}, function () {
    console.log('doing foo:bar task');
    console.log(sys.inspect(arguments));
  });

  desc('This the foo:baz task');
  task({'baz': ['default']}, function () {
    console.log('doing foo:baz task');
    console.log(sys.inspect(arguments));
  });

  desc('This tests the legacy string+array syntax');
  task('legacy', ['foo:baz', 'default'], function () {
    console.log('doing foo:legacy task');
    console.log(sys.inspect(arguments));
  });

  desc('This the foo:zoobie task');
  task('zoobie', function () {
    var t;
    console.log('doing foo:zoobie task');
    console.log(sys.inspect(arguments));
    t = jake.Task.qwer;
    t.invoke.apply(t, arguments);
    t.invoke.apply(t, arguments);
  });

  desc('This the foo:frang task');
  task('frang', function () {
    console.log('doing foo:frang task');
    console.log(sys.inspect(arguments));
    t = jake.Task.qwer;
    t.execute.apply(t, arguments);
    t.execute.apply(t, arguments);
  });

  desc('This the foo:fonebone task');
  task('fonebone', function () {
    console.log('doing foo:fonebone task');
    console.log(sys.inspect(arguments));
    t = jake.Task.qwer;
    t.invoke.apply(t, arguments);
    t.reenable(true);
    t.invoke.apply(t, arguments);
  });

  desc('This the foo:qux task');
  task('qux', function () {
    console.log('starting async foo:qux task');
    console.log(sys.inspect(arguments));
    setTimeout(function () {
      console.log('completing async foo:qux task');
      complete();
    }, 0);
  }, true);
});

namespace('bar', function() {
  directory('bar');
  
  task({'setup': 'bar:bar'}, function() {
    fs.writeFileSync('bar/test.txt', 'test');
  });

  desc('Namespaced file task, don\'t run unless the prereq file changes');
  file({'bar/src2.txt': 'bar/test.txt'}, function () {
    console.log('doing src2.txt file-task');
    fs.writeFileSync('bar/src2.txt', '');
  });
});

desc('Tests jake.exec API call');
task('testExec', function () {
  var cmds = [
        'echo "testing"'
      , 'true'
      , 'echo "seems to work"'
      ]
    , callback = function () {
        complete();
      };
  jake.exec(cmds, callback, {stdout: true});
}, true);
*/


